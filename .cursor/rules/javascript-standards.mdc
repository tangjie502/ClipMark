---
globs: *.js
---

# ClipMark JavaScript 代码规范

## 📝 编码标准

### 基础语法规范
- **分号使用：** 所有语句结尾必须使用分号
- **引号规范：** 统一使用双引号，字符串内嵌双引号时使用单引号
- **命名约定：** 
  - 变量和函数使用 camelCase：`userName`, `downloadFile()`
  - 常量使用 UPPER_SNAKE_CASE：`DEFAULT_OPTIONS`, `API_BASE_URL`
  - 类名使用 PascalCase：`ContentExtractor`, `MarkdownConverter`

### 异步编程规范
- **优先使用 async/await** 而非 Promise chains
- **错误处理：** 使用 try-catch 包装异步操作
```javascript
async function downloadMarkdown(content) {
  try {
    const blob = new Blob([content], { type: "text/markdown" });
    const url = URL.createObjectURL(blob);
    return await chrome.downloads.download({ url, filename });
  } catch (error) {
    console.error("下载失败:", error);
    throw error;
  }
}
```

## 🏗️ Chrome Extension API 使用规范

### Service Worker 开发
参考 [service-worker.js](mdc:src/service-worker.js) 的实现：
- **事件监听器：** 使用 `chrome.runtime.onInstalled`、`chrome.action.onClicked` 等
- **消息传递：** 使用 `chrome.runtime.onMessage` 处理组件间通信
- **生命周期管理：** 避免长时间运行的后台任务

### Storage API 使用
- **获取设置：** 
```javascript
const options = await chrome.storage.sync.get(DEFAULT_OPTIONS);
```
- **保存设置：**
```javascript
await chrome.storage.sync.set({ downloadImages: true });
```

### Content Script 开发
参考 [contentScript.js](mdc:src/contentScript/contentScript.js)：
- **DOM 操作：** 确保在 `document.readyState === "complete"` 后执行
- **事件处理：** 使用事件委托避免内存泄漏
- **消息通信：** 使用 `chrome.runtime.sendMessage()` 与背景脚本通信

## 🎯 特定功能开发规范

### Markdown 转换处理
参考 [background/turndown.js](mdc:src/background/turndown.js)：
- **配置规范：** 使用统一的Turndown配置
- **插件使用：** 加载GFM（GitHub Flavored Markdown）插件
- **自定义规则：** 为特殊HTML元素定义转换规则

### 内容提取逻辑
参考 [background/Readability.js](mdc:src/background/Readability.js)：
- **页面清理：** 使用Mozilla Readability.js提取主要内容
- **元数据提取：** 获取标题、作者、发布时间等信息
- **图片处理：** 处理相对路径和懒加载图片

### UI 组件开发
参考 [popup/popup.js](mdc:src/popup/popup.js)：
- **事件绑定：** 使用 `addEventListener` 而非内联事件
- **状态管理：** 将UI状态与扩展存储同步
- **响应式更新：** 根据用户操作实时更新界面

## 🔧 工具库使用规范

### CodeMirror 集成
参考 [popup/lib/codemirror.js](mdc:src/popup/lib/codemirror.js)：
- **主题配置：** 支持亮色/暗色主题切换
- **语法高亮：** 使用Markdown模式
- **编辑器配置：** 设置合适的行号、换行等选项

### 第三方库管理
- **版本控制：** 明确指定第三方库版本，避免破坏性更新
- **安全检查：** 定期检查依赖库的安全漏洞
- **本地化：** 将第三方库本地化，减少网络依赖

## 🚨 错误处理和调试

### 统一错误处理
```javascript
function handleError(error, context) {
  console.error(`[${context}] 错误:`, error);
  // 发送错误报告或显示用户友好消息
}
```

### 调试最佳实践
- **日志分级：** 使用 `console.log`、`console.warn`、`console.error`
- **开发模式：** 在开发环境中启用详细日志
- **生产模式：** 在生产环境中关闭调试信息

## 📊 性能优化指南

### 内存管理
- **及时清理：** 移除不再使用的事件监听器
- **避免内存泄漏：** 注意闭包中的变量引用
- **合理缓存：** 缓存频繁访问的数据，但避免过度缓存

### 加载优化
- **按需加载：** 延迟加载非关键资源
- **代码分割：** 将大型脚本拆分为多个模块
- **资源压缩：** 在生产环境中压缩JavaScript文件