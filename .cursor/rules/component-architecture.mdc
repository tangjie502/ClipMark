---
description: "ClipMark组件架构和数据流设计规范"
---

# ClipMark 组件架构规范

## 🏗️ 整体架构设计

### 组件分层架构
```
┌─────────────────────────────────────┐
│         用户界面层 (UI Layer)          │
│  ┌─────────┐ ┌─────────┐ ┌─────────┐│
│  │  Popup  │ │ Options │ │ Preview ││
│  └─────────┘ └─────────┘ └─────────┘│
├─────────────────────────────────────┤
│        业务逻辑层 (Logic Layer)        │
│  ┌─────────────────────────────────┐ │
│  │      Service Worker           │ │
│  └─────────────────────────────────┘ │
├─────────────────────────────────────┤
│       内容处理层 (Content Layer)       │
│  ┌─────────┐ ┌─────────┐ ┌─────────┐│
│  │ Content │ │  Page   │ │ Context ││
│  │ Script  │ │ Context │ │ Menus   ││
│  └─────────┘ └─────────┘ └─────────┘│
├─────────────────────────────────────┤
│        核心库层 (Core Layer)          │
│  ┌─────────┐ ┌─────────┐ ┌─────────┐│
│  │Readabil-│ │Turndown │ │ Default ││
│  │ity.js   │ │  .js    │ │ Options ││
│  └─────────┘ └─────────┘ └─────────┘│
└─────────────────────────────────────┘
```

## 📱 UI组件设计规范

### Popup 组件 ([popup/](mdc:src/popup/))
**职责：** 主要用户交互界面，处理剪藏操作
- **数据输入：** 用户选择的内容、设置选项
- **数据输出：** 转换后的Markdown内容
- **关键文件：** 
  - [popup.html](mdc:src/popup/popup.html) - 界面结构
  - [popup.js](mdc:src/popup/popup.js) - 交互逻辑
  - [popup.css](mdc:src/popup/popup.css) - 样式定义

### Options 组件 ([options/](mdc:src/options/))
**职责：** 扩展设置管理界面
- **配置管理：** 用户偏好设置、模板配置
- **数据持久化：** 使用 `chrome.storage.sync` 存储设置
- **实时预览：** 设置变更的即时反馈

### Preview 组件 ([preview/](mdc:src/preview/))
**职责：** Markdown内容预览和编辑
- **内容渲染：** 实时Markdown预览
- **编辑器集成：** CodeMirror编辑器组件
- **导出功能：** 下载、复制到剪贴板等操作

## ⚙️ 业务逻辑层设计

### Service Worker ([service-worker.js](mdc:src/service-worker.js))
**核心职责：**
- **消息路由：** 处理各组件间的消息传递
- **后台任务：** 文件下载、批量处理等
- **上下文菜单：** 右键菜单事件处理
- **生命周期管理：** 扩展安装、更新事件

**通信接口设计：**
```javascript
// 标准消息格式
{
  action: "convertToMarkdown",    // 操作类型
  data: {                        // 数据载荷
    html: "<html>...",
    title: "页面标题",
    url: "https://example.com"
  },
  options: {                     // 转换选项
    downloadImages: true,
    includeTemplate: false
  }
}
```

## 🌐 内容处理层设计

### Content Script ([contentScript/](mdc:src/contentScript/))
**职责：** 网页内容提取和DOM操作
- **内容提取：** 选中文本或全页面内容
- **DOM遍历：** 智能识别主要内容区域
- **事件监听：** 用户选择操作、快捷键处理

**与页面交互模式：**
```javascript
// 注入页面上下文脚本
function injectPageScript() {
  const script = document.createElement("script");
  script.src = chrome.runtime.getURL("contentScript/pageContext.js");
  document.documentElement.appendChild(script);
}
```

### Context Menus ([shared/context-menus.js](mdc:src/shared/context-menus.js))
**职责：** 右键菜单功能实现
- **菜单创建：** 动态创建上下文菜单项
- **权限检查：** 根据页面状态启用/禁用菜单
- **批量操作：** 支持多链接选择和处理

## 🔧 核心库层设计

### 内容提取引擎
**Readability.js 集成** ([background/Readability.js](mdc:src/background/Readability.js))
- **算法优化：** Mozilla Readability算法
- **内容清理：** 移除广告、导航等无关内容
- **元数据提取：** 标题、作者、发布时间等

### Markdown转换引擎
**Turndown.js 配置** ([background/turndown.js](mdc:src/background/turndown.js))
- **转换规则：** HTML到Markdown的映射规则
- **插件系统：** GFM（GitHub Flavored Markdown）支持
- **自定义规则：** 特殊元素的处理逻辑

### 配置管理系统
**默认选项管理** ([shared/default-options.js](mdc:src/shared/default-options.js))
```javascript
const DEFAULT_OPTIONS = {
  downloadImages: true,           // 下载图片
  includeTemplate: false,         // 包含模板
  turndownGfm: true,             // 启用GFM
  frontmatter: "",               // 前置模板
  backmatter: "",                // 后置模板
  // ... 其他配置项
};
```

## 🔄 数据流设计

### 标准剪藏流程
1. **用户触发** → Popup界面显示
2. **内容获取** → Content Script提取页面内容
3. **数据处理** → Service Worker调用Readability.js清理内容
4. **格式转换** → 使用Turndown.js转换为Markdown
5. **结果展示** → Preview组件显示转换结果
6. **用户确认** → 下载文件或复制到剪贴板

### 设置同步流程
1. **用户修改设置** → Options页面
2. **数据验证** → 前端表单验证
3. **存储更新** → chrome.storage.sync保存
4. **组件通知** → 广播设置变更消息
5. **界面更新** → 各组件根据新设置更新界面

## 🎯 组件通信规范

### 消息传递机制
- **单向通信：** Content Script → Service Worker → UI Components
- **双向通信：** UI Components ↔ Service Worker
- **事件广播：** Service Worker → All Components (设置变更通知)

### 错误传播机制
- **错误捕获：** 各组件内部try-catch处理
- **错误上报：** 统一错误处理函数
- **用户反馈：** 友好的错误提示界面

## 🚀 性能优化策略

### 组件懒加载
- **按需初始化：** 只在需要时加载组件
- **资源分离：** 将大型库文件单独管理
- **缓存策略：** 合理使用浏览器缓存

### 内存管理
- **生命周期管理：** 组件创建和销毁时机
- **事件清理：** 移除不再使用的事件监听器
- **数据清理：** 定期清理临时数据和缓存